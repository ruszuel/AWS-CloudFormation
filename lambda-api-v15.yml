AWSTemplateFormatVersion: 2010-09-09
Description: "Lambda API Gateway Sample"

Parameters:
  restApiName:
    Description: "The name of our REST API"
    Type: String
    Default: "restApiSampleCfn"
  lambdaS3Bucket:
    Description: "S3 Bucket of Lambda Function"
    Type: String
    Default: "jlrt-trn-cfn-scripts"
  #hello lambda params
  helloFunctionName:
    Description: "Lambda Function Name"
    Type: String
    Default: fnHelloApiCfn
  helloLambdaZipFile:
    Description: "Lambda Zip File in the bucket's lambda/ folder"
    Type: String
    Default: "hello_lambda-v0.zip" 
  helloLambdaHandler:
    Description: "Lambda Handler Function Name"
    Type: String
    Default: "hello_lambda.handler"

Resources: 
  restApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: "Sample REST API using CFN"
      Name: !Ref restApiName

  restApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt restApi.RootResourceId
      PathPart: hello
      RestApiId: !Ref restApi
  
  helloRestMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join [ "", [ "arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt helloLambdaFunction.Arn, "/invocations"] ]
      ResourceId: !Ref restApiResource
      RestApiId: !Ref restApi

  helloLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref lambdaS3Bucket
        S3Key: !Join [ "/", ["lambda", !Ref helloLambdaZipFile]]
      Description: "Sample Lambda Hello API using CFN"
      FunctionName: !Ref helloFunctionName
      Handler: !Ref helloLambdaHandler
      Role: !GetAtt helloLambdaFunctionRole.Arn # Required
      Runtime: "python3.12"
      Timeout: 60
  
  helloLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service:
                - lambda.amazonaws.com
            Action: 
              - "sts:AssumeRole"
        
      Description: !Join [ " ", [ "IAM ROle for",  !Ref helloFunctionName, "lambda function"]]
      RoleName: !Join ["-", [!Ref helloFunctionName, "lambda", "role"]]
      Policies:
        - PolicyName: !Join [ "", [!Ref helloFunctionName, "execution", "policy"]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: 
                  - "logs:CreateLogGroup"
                Resource:
                  - "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action: 
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Join ["", ["arn:aws:logs:*:*:log-group:/aws/lambda/", !Ref helloFunctionName ,":*"]]

  restApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref restApiStageDeployment
      Description: "Dev Deployment Stage for Hello API"
      MethodSettings: 
        - HttpMethod: "Get"
          ResourcePath: "/hello"
      RestApiId: !Ref restApi
      StageName: "dev"

  restApiStageDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref restApi
    DependsOn:
      - helloRestMethod
  
  restApiLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt helloLambdaFunction.Arn
      Principal: "apigateway.amazonaws.com" 
      SourceArn: !Join [ "", [ "arn:aws:execute-api:", !Ref "AWS::Region", ":",!Ref "AWS::AccountId", ":", !Ref restApi, "/*" ] ]
         