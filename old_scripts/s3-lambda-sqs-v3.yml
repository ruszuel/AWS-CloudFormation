AWSTemplateFormatVersion: 2010-09-09
Description: "Sample Lambda Function using CFN"

Parameters:
  # lambda producer
  functionName:
    Description: "Lambda Function Name"
    Type: String
    Default: fnS3LambdaCfn
  S3Bucket:
    Description: "S3 Bucket of Lambda Function"
    Type: String
    Default: "jlrt-trn-cfn-scripts"
  lambdaZipFile:
    Description: "Lambda Zip File in the bucket's lambda/ folder"
    Type: String
    Default: "s3_lambda-v0.zip" 
  lambdaHandler:
    Description: "Lambda Handler Function Name"
    Type: String
    Default: "s3_lambda.handler"

  # lambda consumer
  consumerFunctionName:
    Description: "Lambda Consumer Function Name"
    Type: String
    Default: fnConsumerLambdaCfn
  consumerLambdaZipFile:
    Description: "Consumer Lambda Zip File in the bucket's lambda/ folder"
    Type: String
    Default: "consumer_lambda-v0.zip" 
  consumerLambdaHandler:
    Description: "Consumer Lambda Handler Function Name"
    Type: String
    Default: "consumer_lambda.handler"

  s3BucketToMonitor:
    Type: String
    Description: "The S3 Bucket Name we will user to monitor"
    Default: "jlrt-trn-s3lambda-int"
  queueName:
    Description: "SQS Queue Name"
    Type: String
    Default: "s3EventsQueueCfn"

Resources: 
# lambda producer
  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Join [ "/", ["lambda", !Ref lambdaZipFile]]
      Description: "Sample Lambda using CFN"
      Environment:
        Variables:
          queue_url: !GetAtt primaryQue.QueueUrl
      FunctionName: !Ref functionName
      Handler: !Ref lambdaHandler
      Role: !GetAtt lambdaFunctionRole.Arn # Required
      Runtime: "python3.12"
      Timeout: 60
  
  lambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service:
                - lambda.amazonaws.com
            Action: 
              - "sts:AssumeRole"
        
      Description: !Join [ " ", [ "IAM ROle for",  !Ref functionName, "lambda function"]]
      RoleName: !Join ["-", [!Ref functionName, "lambda", "role"]]
      Policies:
        - PolicyName: !Join [ "", [!Ref functionName, "execution", "policy"]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: 
                  - "logs:CreateLogGroup"
                Resource:
                  - "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action: 
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Join ["", ["arn:aws:logs:*:*:log-group:/aws/lambda/", !Ref functionName ,":*"]]
              - Effect: "Allow"
                Action: 
                  - "sqs:SendMessage"
                Resource:
                  - !GetAtt primaryQue.Arn

# lambda consumer
  consumerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Join [ "/", ["lambda", !Ref consumerLambdaZipFile]]
      Description: "Sample Lambda using CFN"
      FunctionName: !Ref consumerFunctionName
      Handler: !Ref consumerLambdaHandler
      Role: !GetAtt consumerLambdaFunctionRole.Arn # Required
      Runtime: "python3.12"
      Timeout: 60
  
  consumerLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service:
                - lambda.amazonaws.com
            Action: 
              - "sts:AssumeRole"
        
      Description: !Join [ " ", [ "IAM ROle for",  !Ref consumerFunctionName, "lambda function"]]
      RoleName: !Join ["-", [!Ref consumerFunctionName, "lambda", "role"]]
      Policies:
        - PolicyName: !Join [ "", [!Ref consumerFunctionName, "execution", "policy"]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: 
                  - "logs:CreateLogGroup"
                Resource:
                  - "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action: 
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Join ["", ["arn:aws:logs:*:*:log-group:/aws/lambda/", !Ref consumerFunctionName ,":*"]]
              - Effect: "Allow"
                Action: 
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource:
                  - !GetAtt primaryQue.Arn
  
  myS3Bucket:
    Type: AWS::S3::Bucket
    DependsOn: s3LambdaInvokePermission
    Properties: 
      BucketName: !Ref s3BucketToMonitor
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt lambdaFunction.Arn

  s3LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Join ["", ["arn:aws:s3:::", !Ref s3BucketToMonitor]]
  
  primaryQue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref queueName
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt deadletterQue.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 120

  deadletterQue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Join [ "-", [ !Ref queueName, "DLQ"] ]
      VisibilityTimeout: 10

  sqsEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt primaryQue.Arn
      FunctionName: !GetAtt consumerLambdaFunction.Arn
      