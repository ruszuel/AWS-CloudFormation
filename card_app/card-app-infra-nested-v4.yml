AWSTemplateFormatVersion: 2010-09-09
Description: "Lambda API Gateway Sample"

Parameters:
  restApiName:
    Description: "The name of our REST API"
    Type: String
    Default: "CardApiCfn"
  lambdaS3Bucket:
    Description: "S3 Bucket of Lambda Function"
    Type: String
    Default: "jlrt-trn-cfn-scripts"

  #CardList lambda params
  listFunctionName:
    Description: "Card List Lambda Function Name"
    Type: String
    Default: fnCardListApiCfn
  listLambdaZipFile:
    Description: "Lambda Zip File in the bucket's lambda/ folder"
    Type: String
    Default: "fn_card_list_cfn-v0.zip" 
  listLambdaHandler:
    Description: "Lambda Handler Function Name"
    Type: String
    Default: "fn_card_list_cfn.handler"

  #Card Status lambda params
  statusFunctionName:
    Description: "Card Status Update Lambda Function Name"
    Type: String
    Default: fnCardStatusApiCfn
  statusLambdaZipFile:
    Description: "Lambda Zip File in the bucket's lambda/ folder"
    Type: String
    Default: "fn_card_status_update_cfn-v0.zip" 
  statusLambdaHandler:
    Description: "Lambda Handler Function Name"
    Type: String
    Default: "fn_card_status_update_cfn.handler"
  
  #Card Register lambda params
  registerFunctionName:
    Description: "Card Register Lambda Function Name"
    Type: String
    Default: fnCardRegisterApiCfn
  registerLambdaZipFile:
    Description: "Lambda Zip File in the bucket's lambda/ folder"
    Type: String
    Default: "fn_card_reg_cfn-v0.zip" 
  registerLambdaHandler:
    Description: "Lambda Handler Function Name"
    Type: String
    Default: "fn_card_reg_cfn.handler"
  templateLambdaStackURL:
    Description: "Template URL"
    Type: String
    Default: "https://jlrt-trn-cfn-scripts.s3.us-east-1.amazonaws.com/template/lambda-function.yml"
  templateApiStackURL:
    Description: "API Template URL"
    Type: String
    Default: "https://jlrt-trn-cfn-scripts.s3.us-east-1.amazonaws.com/template/api-function-v0.yml"

Resources: 
  restApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: "Sample REST API using CFN"
      Name: !Ref restApiName

  listApiResource:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Ref templateApiStackURL
      Parameters:
        restApiResourceId: !GetAtt restApi.RootResourceId
        templateRestApi: !Ref restApi
        apiRoutes: list
        routeHttpMethod: "GET"
        lambdaFunctionArn: !GetAtt listLambdaFunction.Outputs.functionArn

  registerApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt restApi.RootResourceId
      PathPart: register
      RestApiId: !Ref restApi

  statusApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt restApi.RootResourceId
      PathPart: update-status
      RestApiId: !Ref restApi
  
  # List Lambda Function
  listLambdaFunction:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Ref templateLambdaStackURL
      Parameters:
        functionName: !Ref listFunctionName
        S3Bucket: !Ref lambdaS3Bucket
        lambdaZipFile: !Ref listLambdaZipFile
        functionDescription: "Card List Lambda Function"
        functionHandler: !Ref listLambdaHandler

  # Register Lambda Function
  registerLambdaFunction:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Ref templateLambdaStackURL
      Parameters:
        functionName: !Ref registerFunctionName
        S3Bucket: !Ref lambdaS3Bucket
        lambdaZipFile: !Ref registerLambdaZipFile
        functionDescription: "Card Register Lambda Function"
        functionHandler: !Ref registerLambdaHandler

  # Status Update Lambda Function
  statusLambdaFunction:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Ref templateLambdaStackURL
      Parameters:
        functionName: !Ref statusFunctionName
        S3Bucket: !Ref lambdaS3Bucket
        lambdaZipFile: !Ref statusLambdaZipFile
        functionDescription: "Card Status Update Lambda Function"
        functionHandler: !Ref statusLambdaHandler
  
 # Register Rest Method
  registerRestMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join [ "", [ "arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt registerLambdaFunction.Outputs.functionArn, "/invocations"] ]
      ResourceId: !Ref registerApiResource
      RestApiId: !Ref restApi

  # Status Rest Method
  statusRestMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join [ "", [ "arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt statusLambdaFunction.Outputs.functionArn, "/invocations"] ]
      ResourceId: !Ref statusApiResource
      RestApiId: !Ref restApi
  
  #Rest API Stage
  restApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref restApiStageDeployment
      Description: "Dev Deployment Stage for Hello API"
      MethodSettings: 
        - HttpMethod: "*"
          ResourcePath: "/*"
      RestApiId: !Ref restApi
      StageName: "dev"

  # Rest API Deployment
  restApiStageDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref restApi
    DependsOn:
      - listApiResource
      - registerRestMethod
      - statusRestMethod
 
  # Register API Lambda Permission
  registerApiLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt registerLambdaFunction.Outputs.functionArn
      Principal: "apigateway.amazonaws.com" 
      SourceArn: !Join [ "", [ "arn:aws:execute-api:", !Ref "AWS::Region", ":",!Ref "AWS::AccountId", ":", !Ref restApi, "/*" ] ]
  
  # Status API Lambda Permission
  statusApiLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt statusLambdaFunction.Outputs.functionArn
      Principal: "apigateway.amazonaws.com" 
      SourceArn: !Join [ "", [ "arn:aws:execute-api:", !Ref "AWS::Region", ":",!Ref "AWS::AccountId", ":", !Ref restApi, "/*" ] ]

  #Database
  cardDatabase:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions: 
        - AttributeName: "card_no"
          AttributeType: "S"
      KeySchema: # Required
        - AttributeName: "card_no"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableClass: "STANDARD"
      TableName: "card_account_cfn"

  cardDatabaseTablePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "card_account_read_write_cfn" # Required
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "dynamodb:PutItem"
              - "dynamodb:UpdateItem"
              - "dynamodb:Scan"
            Resource: !GetAtt cardDatabase.Arn 
      Roles:
        - !GetAtt listLambdaFunction.Outputs.IAMRole
        - !GetAtt registerLambdaFunction.Outputs.IAMRole
        - !GetAtt statusLambdaFunction.Outputs.IAMRole